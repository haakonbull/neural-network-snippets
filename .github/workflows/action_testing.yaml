name: ✨ Criticize new issues
on:
    issues:
        types: [opened, reopened]

jobs:
    call-zoo:
        runs-on: ubuntu-latest #<-- OPS!! Må endres til innovation-k8s
        permissions:
            contents: read
            issues: write
        steps:
            - name: Install JQ
              run: |
                sudo apt-get update
                sudo apt-get install -y jq curl gh
                      
            - name: Call Zoo
              id: zoo
              run: |

                # Get the issue description
                ISSUE_DESCRIPTION=$(jq -r '.issue.body' $GITHUB_EVENT_PATH)
                echo "ISSUE_DESCRIPTION: $ISSUE_DESCRIPTION"
                echo "2409160807"

                # Get the issue title
                ISSUE_TITLE=$(jq -r '.issue.title' $GITHUB_EVENT_PATH)
                echo "ISSUE_TITLE: $ISSUE_TITLE"
                echo "2409160806"

                # Define the prompt using printf
                PROMPT=$(printf '%s\n' \
                "The following is a github issue. The githus issue should be it should be clear, consise, and it should be Rate the clarity and level of detail of the following GitHub issue description from 0 to 9, where 0 is very unclear and lacking detail, and 10 is extremely clear and detailed." \
                "Only provide a single number as your response." \
                "" \
                   "ISSUE TITLE: $ISSUE_TITLE" \
                "" \
                "ISSUE DESCRIPTION:" \
                "$ISSUE_DESCRIPTION")

                echo "PROMPT: $PROMPT"
                echo "2409160805"

                # Create the payload using jq to ensure valid JSON
                # PAYLOAD=$(jq -n --arg model "gpt-4o" --arg content "$PROMPT" --argjson stream false --arg max_tokens 500 '{
                #   model: $model,
                #   messages: [
                #     {
                #       role: "user",
                #       content: $content
                #     }
                #   ],
                #   stream: $stream,
                #   max_tokens: ($max_tokens | tonumber)
                # }')

                # echo "PAYLOAD: $PAYLOAD"
                # echo "2409160804"

                # # Validate the JSON payload
                # echo "$PAYLOAD" | jq . > /dev/null
                # if [ $? -ne 0 ]; then
                #   echo "Invalid JSON payload"
                #   exit 1
                # fi
                # echo "2409160803"

                
                # # Call your API with the issue description
                # API_RESPONSE=$(curl -X POST -H "Content-Type: application/json" -H "User-Agent: GHAction/Issue-Checker" -H "api-key: ${{ secrets.ZOO_API_KEY }}" -d "$PAYLOAD" https://llm.reasoning.innovation.kognitwin.com/proxy/chat/completions)              
                #echo "API_RESPONSE: $API_RESPONSE"
                #echo "2409160802"
                

                # Parse the API response to extract the message
                #MESSAGE=$(printf '%s' "$API_RESPONSE" | jq -r '.choices[0].message.content')
                MESSAGE="the rating of__ the text was :{6}:4 1 _" #<-- OPS!! Slett!! 
                echo "MESSAGE: $MESSAGE"
                echo "2409160801"

                # Extract rating number from the response
                RATING_NUMBER=$(echo "$MESSAGE" | grep -oE '[0-9]+' | head -n 1)
                echo "RATING_NUMBER: $RATING_NUMBER"
                echo "2409160800"

                # Ensure RATING_NUMBER is a valid number
                if ! [[ "$RATING_NUMBER" =~ ^[0-9]+$ ]]; then
                  echo "2409160810"
                  echo "Invalid rating number received: $RATING_NUMBER"
                  exit 1
                fi
                echo "2409160811"



                # Set the threshold value
                THRESHOLD_VALUE=5

                # Check if RATING_NUMBER is less than THRESHOLD_VALUE
                if [ "$RATING_NUMBER" -lt "$THRESHOLD_VALUE" ]; then
                  # Define the prompt using printf
                  PROMPT=$(printf '%s\n' \
                  "Please provide a concise and short bulletpoint list of things that can be improved about the following issue description." \
                  "Focus on clarity, how the proposed change can provide value, and if the proposed change considers its surrounding context." \
                  "" \
                  "Remember what a good issue for value-driven development looks like." \
                  "Think hard about it. Make sure you don't point out things that are already clear or that are not relevant to the issue." \
                  "At the end of the bulletpoint list, propose an alternate description based on your interpretation of the issue which adheres to your recommendations. " \
                  "Your response must be formated with markdown, and have the bulletpoint list in a collapsed section wrapped in a details tag." \
                  "The summary tag should summarize in one sentence the most important suggestion you have." \
                  "The alternate description should also be in a collapsed section wrapped in a details tag, but with the issue title in the summary tag." \
                  "If you are able to detect any relationships in the original issue description of any reasonable complexity, try to create a mermaid diagram to illustrate it and place it at the end." \
                  "" \
                  "ISSUE TITLE: $ISSUE_TITLE" \
                  "" \
                  "ISSUE DESCRIPTION:" \
                  "$ISSUE_DESCRIPTION")

                  echo "PROMPT: $PROMPT"

                  # Create the payload using jq to ensure valid JSON
                  # PAYLOAD=$(jq -n --arg model "gpt-4o" --arg content "$PROMPT" --argjson stream false --arg max_tokens 500 '{
                  #   model: $model,
                  #   messages: [
                  #     {
                  #       role: "user",
                  #       content: $content
                  #     }
                  #   ],
                  #   stream: $stream,
                  #   max_tokens: ($max_tokens | tonumber)
                  # }')

                  # echo "PAYLOAD: $PAYLOAD"

                  # # Validate the JSON payload
                  # echo "$PAYLOAD" | jq . > /dev/null
                  # if [ $? -ne 0 ]; then
                  #   echo "Invalid JSON payload"
                  #   exit 1
                  # fi

                  # # Call your API with the issue description
                  # API_RESPONSE=$(curl -X POST -H "Content-Type: application/json" -H "User-Agent: GHAction/Issue-Checker" -H "api-key: ${{ secrets.ZOO_API_KEY }}" -d "$PAYLOAD" https://llm.reasoning.innovation.kognitwin.com/proxy/chat/completions)
                  # echo "API_RESPONSE: $API_RESPONSE"

                  # # Parse the API response to extract the message
                  # MESSAGE=$(printf '%s' "$API_RESPONSE" | jq -r '.choices[0].message.content')
                  MESSAGE="This text should be copied to github issue"
                  echo "MESSAGE: $MESSAGE"

                  # Write the message as a comment on the issue
                  gh issue --repo ${{ github.repository }} comment ${{ github.event.issue.number }} -b "$MESSAGE"

                else
                  echo "Rating ($RATING_NUMBER) is greater than or equal to threshold ($THRESHOLD_VALUE). No action needed."
                fi


              env:
                GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
